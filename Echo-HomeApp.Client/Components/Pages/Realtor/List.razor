@page "/realtor"
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@* https://localhost:7190/api/Realtor?IsActive=true

https://localhost:7190/api/Realtor?IsActive=false&RealtorFirm=exempel

https://localhost:7190/api/Realtor?RealtorFirm=exempel *@


<PageTitle>Realtors</PageTitle>

<h1>Realtors</h1>

@if (Realtors is null)
{
    <p><em>Loading...</em></p>
}


<QuickGrid Class="table" Items="Realtors">
    <PropertyColumn Property="r => r.FirstName" Title="First Name" Sortable="true" />
    <PropertyColumn Property="r => r.LastName" Title="Last Name" Sortable="true" />
    <PropertyColumn Property="r => r.RealtorFirmName" Title="Firm" Sortable="true" />
    <PropertyColumn Property="r => r.Email" Title="Email" Sortable="true" />
    <PropertyColumn Property="r => r.PhoneNumber" Title="Phone" Sortable="true" />
    <PropertyColumn Property="r => r.IsActive" Title="Active" Sortable="true" />
        <TemplateColumn Context="realtor">
        <Button Color= "ButtonColor.Primary" @onclick="() => RedirectToDetailsAsync(realtor.Id)"><Icon Name="IconName.FileText" /></Button>
        </TemplateColumn>
</QuickGrid>
@code
{
    IQueryable<RealtorGetDTO>? Realtors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var realtorsFromApi = await httpClient.GetFromJsonAsync<List<RealtorGetDTO>>("https://localhost:7190/api/Realtor");
        if (realtorsFromApi == null || realtorsFromApi.Count == 0)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            Realtors = realtorsFromApi.AsQueryable();
        }
    }

    private void RedirectToDetailsAsync(string realtorId) => NavigationManager.NavigateTo($"/realtor/details/{realtorId}");
}
