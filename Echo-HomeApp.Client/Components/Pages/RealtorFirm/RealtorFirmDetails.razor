@page "/realtorfirm/details/"
@using Microsoft.AspNetCore.Components.QuickGrid
@using DTOs
@using Models
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject ToastService ToastService
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@{
    /// <summary>
    /// Author: Samed Salman
    /// This page shows a single Realtor firm's details and allows user to update or delete.
    /// </summary>
}

<PageTitle>Edit realtor firm</PageTitle>

<div>
    @if (RealtorFirm is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <h1>Edit @RealtorFirm.Name</h1>

        <div class="row">
            <div class="col-md-4">
                <EditForm method="post" Model="RealtorFirm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mb-3">
                        <InputNumber id="id" @bind-Value="RealtorFirm.Id" class="form-control" />
                        <ValidationMessage For="() => RealtorFirm.Id" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <InputText id="name" @bind-Value="RealtorFirm.Name" class="form-control" />
                        <ValidationMessage For="() => RealtorFirm.Name" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <InputText id="presentation" @bind-Value="RealtorFirm.RealtorFirmPresentation" class="form-control" />
                        <ValidationMessage For="() => RealtorFirm.RealtorFirmPresentation" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <InputText id="logotype" @bind-Value="RealtorFirm.Logotype" class="form-control" />
                        <ValidationMessage For="() => RealtorFirm.Logotype" class="text-danger" />
                    </div>
                </EditForm>
            </div>
        </div>



@*         <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dt class="col-sm-10">@RealtorFirmDTO.Name</dt>
            <dt class="col-sm-2">About</dt>
            <dd class="col-sm-10">@RealtorFirmDTO.RealtorFirmPresentation</dd>
            <dt class="col-sm-2">Logotype url</dt>
            <dd class="col-sm-10">@RealtorFirmDTO.Logotype</dd>
            <dt class="col-sm-2">Logotype image</dt>
            <dd class="col-sm-10"><img src="@RealtorFirmDTO.Logotype" alt="Logotype for @RealtorFirmDTO.Name" class="img-fluid" /></dd>
        </dl> *@
    }
</div>
<div>
    <Button Type="ButtonType.Link" To="/realtorfirms" Color="ButtonColor.Secondary"><Icon Name="IconName.ArrowReturnLeft" /> Cancel</Button>
    <Button Color="ButtonColor.Success" @onclick="() => EditAsync(RealtorFirm.Id)"><Icon Name="IconName.PencilSquare" /> Edit</Button>
    <Button Color="ButtonColor.Danger" @onclick="() => DeleteAsync(RealtorFirm.Id)"><Icon Name="IconName.Trash" /> Delete</Button>
</div>

@code {

    // TODO: (Samed) Add DeActivate()-method and button to this page

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public RealtorFirmGetDTO RealtorFirm { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        RealtorFirm = await httpClient.GetFromJsonAsync<RealtorFirmGetDTO>($@"https://localhost:7190/api/RealtorFirm/{Id}");

        if (RealtorFirm is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task EditAsync(int id)
    {
        await httpClient.PutAsJsonAsync<RealtorFirmGetDTO>($@"https://localhost:7190/api/RealtorFirm/{id}", RealtorFirm);
        NavigationManager.NavigateTo("/realtorfirms");
    }

    private async Task DeleteAsync(int id)
    {
        // TODO: (Samed) add delete confirmation here? "Are you sure..."-popup

        HttpResponseMessage response = await httpClient.DeleteAsync($@"https://localhost:7190/api/RealtorFirm/{id}");

        if(response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/realtorfirms");
            // TODO: Send toast message to next page
        }

        //     NavigationManager.NavigateTo("/realtorfirms");
        // }
        // catch(HttpRequestException ex) when (ex is {StatusCode: HttpStatusCode.NotFound})
        // {
        //     string error = $"Page doesn't exist.";
        // }
        // catch (HttpRequestException ex) when (ex is { StatusCode: HttpStatusCode.BadRequest })
        // {
        //     string error = $"Realtor firm doesn't exist.";
        // }
    }
}