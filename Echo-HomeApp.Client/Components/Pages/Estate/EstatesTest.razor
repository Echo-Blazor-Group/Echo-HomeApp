@page "/Estates"
@using DTOs
@using Models
@inject HttpClient http
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@*author Gustaf*@

<PageTitle >Estates</PageTitle>

<h3>Estates</h3>

@if (estates.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table" >
        <thead>
            <tr>
                @* <th>Id</th> *@
                <th>Address</th>
                <th>Starting Price</th>
                <th>Living Area Kvm</th>
                <th>NumberOfRooms</th>
                @* <th>BiAreaKvm</th> *@
                <th>EstateAreaKvm</th>
@*                 <th>MonthlyFee</th>
                <th>RunningCosts</th> *@
                <th>ConstructionDate</th>
@*                 <th>EstateDescription</th>
                <th>PublishDate</th> *@
                <th>County</th>
                <th>Category</th>
                <th>Realtor</th>       
            </tr>
                @foreach (var estate in estates)
                {
                    <tr>
                        @* <td>@estate.Id</td> *@
                        <td>@estate.Address</td>
                        <td>@estate.StartingPrice</td>
                        <td>@estate.LivingAreaKvm</td>
                        <td>@estate.NumberOfRooms</td>
                        @* <td>@estate.BiAreaKvm</td> *@
                        <td>@estate.EstateAreaKvm</td>
                        @* <td>@estate.MonthlyFee</td> *@
                        @* <td>@estate.RunningCosts</td> *@
                        <td>@estate.ConstructionDate</td>
                        @* <td>@estate.EstateDescription</td> *@
                        @* <td>@estate.PublishDate</td> *@
                        <td>@estate?.County?.CountyName</td>
                        <td>@estate?.Category?.EstateCategory</td>
                        <td>@estate?.Realtor?.FirstName @estate?.Realtor?.LastName</td>
                        <td>@estate?.Pictures.</td>
                        <td><button class="btn btn-primary" @onclick="@(() => EstateEdit(@estate.Id))">Edit</button></td>
                        <td><button class="btn btn-primary" @onclick="@(() => EstateDetails(@estate.Id))">Details</button></td>

                    </tr>
                }

        </thead>
    </table>
}
<button class="btn btn-primary" @onclick="EstateAdd">Add A New Estate</button>

@code {

    List<Estate> estates = new List<Estate>();
    List<Category> categories = new List<Category>();
    List<County> counties = new List<County>();
    // List<RealtorFirm> realtoFirms = new List<RealtorFirm>();
    // List<Realtor> realtors = new List<Realtor>();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);

        var result = await http.GetFromJsonAsync<List<Estate>>("https://localhost:7190/api/Estate");
        var category = await http.GetFromJsonAsync<List<Category>>("https://localhost:7190/api/Category");
        var county = await http.GetFromJsonAsync<List<County>>("https://localhost:7190/api/County");
        // var realtorFirm = await http.GetFromJsonAsync<List<RealtorFirm>>("https://localhost:7190/api/RealtorFirm");
        // var realtor = await http.GetFromJsonAsync<List<Realtor>>("https://localhost:7190/api/Realtor");
        if (result is not null) estates = result;
        if (category is not null) categories = category;
        if (county is not null) counties = county;
        // if (realtorFirm is not null) realtoFirms = realtorFirm;
        // if (realtor is not null) realtors = realtor;
    }

    void EstateAdd()
    {
        NavigationManager.NavigateTo("EstateAddTest");
    }

    void EstateEdit(int id)
    {
        NavigationManager.NavigateTo($"EstateEditTest/{id}");
    }
    void EstateDetails(int id)
    {
        NavigationManager.NavigateTo($"EstateDetails/{id}");
    }


}

    @*Need to add null check and fix for when calling objects so that the site will load even if and object is broken. Currently when calling on 
        houses without mäklare or counties or category the site breaks down.
    *@