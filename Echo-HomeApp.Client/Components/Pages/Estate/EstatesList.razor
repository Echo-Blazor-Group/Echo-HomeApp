@page "/Estates"
@using DTOs
@using Models
@inject HttpClient http
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@*author Gustaf*@

<PageTitle>Estates</PageTitle>

<h2>Estates on the market</h2>

@if (estates.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <QuickGrid Class="table" Items="FilteredEstates" Pagination="pagination">
        <PropertyColumn Property="e => e.Address" Title="Adress"></PropertyColumn>
        <PropertyColumn Property="e => e.StartingPrice" Title="Starting Price" Sortable="true">
            <ColumnOptions>
                <input type="search" @bind="filteredText" @bind:event="oninput" placeholder="search price" />
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="e => e.LivingAreaKvm" Title="LivingArea Kvm" Sortable="true">
            <ColumnOptions>
                <input type="search" @bind="filteredText" @bind:event="oninput" placeholder="search kvm" />
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="e => e.NumberOfRooms" Title="Number of rooms" Sortable="true">
            <ColumnOptions>
                <input type="search" @bind="filteredText" @bind:event="oninput" placeholder="search rooms" />
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="e => e.EstateAreaKvm" Title="EstateArea Kvm"></PropertyColumn>
        <PropertyColumn Property="e => e.ConstructionDate" Title="Construction Date" ></PropertyColumn>
        <PropertyColumn Property="e => e.County.CountyName" Title="County" Sortable="true">
            <ColumnOptions>
                <input type="search" @bind="filteredText" @bind:event="oninput" placeholder="search location" />
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="e => e.Category.EstateCategory" Title="Category" Sortable="true">
            <ColumnOptions>
                <input type="search" @bind="filteredText" @bind:event="oninput" placeholder="search category" />
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="e => e.Realtor.FirstName + e.Realtor.LastName" Title="Realtor">
            <ColumnOptions>
                <input type="search" @bind="filteredText" @bind:event="oninput" placeholder="search realtor" />
            </ColumnOptions>
        </PropertyColumn>
        <TemplateColumn Context="estates" Title="Handle">
            <Button Color="ButtonColor.Primary" @onclick="() => EstateDetails(estates.Id)"><Icon Name="IconName.FileText" /> Details</Button>
        </TemplateColumn>
    </QuickGrid>

    <Paginator State="@pagination"></Paginator>
    <table class="table">
        <thead>
            <tr>
                @* <th>Id</th> *@
                <th>Address</th>
                <th>Starting Price</th>
                <th>Living Area Kvm</th>
                <th>NumberOfRooms</th>
                @* <th>BiAreaKvm</th> *@
                <th>EstateAreaKvm</th>
                @* <th>MonthlyFee</th>
            <th>RunningCosts</th> *@
                <th>ConstructionDate</th>
                @* <th>EstateDescription</th>
            <th>PublishDate</th> *@
                <th>County</th>
                <th>Category</th>
                <th>Realtor</th>
                
            </tr>
            @foreach (var estate in estates.Where(e => e.OnTheMarket == true))
            {

                <tr>
                    @* <td>@estate.Id</td> *@
                    <td>@estate.Address</td>
                    <td>@estate.StartingPrice</td>
                    <td>@estate.LivingAreaKvm</td>
                    <td>@estate.NumberOfRooms</td>
                    @* <td>@estate.BiAreaKvm</td> *@
                    <td>@estate.EstateAreaKvm</td>
                    @* <td>@estate.MonthlyFee</td> *@
                    @* <td>@estate.RunningCosts</td> *@
                    <td>@estate.ConstructionDate</td>
                    @* <td>@estate.EstateDescription</td> *@
                    @* <td>@estate.PublishDate</td> *@
                    <td>@estate?.County?.CountyName</td>
                    <td>@estate?.Category?.EstateCategory</td>
                    <td>@estate?.Realtor?.FirstName @estate?.Realtor?.LastName</td>
                    
                    @* <td><button class="btn btn-primary" @onclick="@(() => EstateEdit(@estate.Id))">Edit</button></td> *@
                    <td><button class="btn btn-primary" @onclick="@(() => EstateDetails(@estate.Id))">Details</button></td>
                </tr>

            }

        </thead>
    </table>
}
<button class="btn btn-primary" @onclick="EstateAdd">Add A New Estate</button>


<h3>Estates of the market</h3>
<table class="table">
    <thead>
        <tr>
            @* <th>Id</th> *@
            <th>Address</th>
            <th>Starting Price</th>
            <th>Living Area Kvm</th>
            <th>NumberOfRooms</th>
            @* <th>BiAreaKvm</th> *@
            <th>EstateAreaKvm</th>
            @*                 <th>MonthlyFee</th>
            <th>RunningCosts</th> *@
            <th>ConstructionDate</th>
            @*                 <th>EstateDescription</th>
            <th>PublishDate</th> *@
            <th>County</th>
            <th>Category</th>
            <th>Realtor</th>
        </tr>
        @foreach (var estate in estates.Where(e => e.OnTheMarket == false))
        {
            <tr>
                @* <td>@estate.Id</td> *@
                <td>@estate.Address</td>
                <td>@estate.StartingPrice</td>
                <td>@estate.LivingAreaKvm</td>
                <td>@estate.NumberOfRooms</td>
                @* <td>@estate.BiAreaKvm</td> *@
                <td>@estate.EstateAreaKvm</td>
                @* <td>@estate.MonthlyFee</td> *@
                @* <td>@estate.RunningCosts</td> *@
                <td>@estate.ConstructionDate</td>
                @* <td>@estate.EstateDescription</td> *@
                @* <td>@estate.PublishDate</td> *@
                <td>@estate?.County?.CountyName</td>
                <td>@estate?.Category?.EstateCategory</td>
                <td>@estate?.Realtor?.FirstName @estate?.Realtor?.LastName</td>
                <td>@estate?.Pictures.</td>
                @* <td><button class="btn btn-primary" @onclick="@(() => EstateEdit(@estate.Id))">Edit</button></td> *@
                <td><button class="btn btn-primary" @onclick="@(() => EstateDetails(@estate.Id))">Details</button></td>
            </tr>
        }
    </thead>
</table>

@code {
    List<Estate> estates = new List<Estate>();
    List<Category> categories = new List<Category>();
    List<County> counties = new List<County>();
    string? filteredText;
    IQueryable<Estate> FilteredEstates
    {
        get
        {
            var result = estates.AsQueryable();
            if(!string.IsNullOrEmpty(filteredText))
            {
                result = result.Where(e => e.County.CountyName.Contains(filteredText, StringComparison.CurrentCultureIgnoreCase)
                || e.Category.EstateCategory.Contains(filteredText, StringComparison.CurrentCultureIgnoreCase)
                || e.Realtor.FirstName.Contains(filteredText, StringComparison.CurrentCultureIgnoreCase)
                || e.NumberOfRooms.Equals(int.Parse(filteredText))
                || e.LivingAreaKvm.Equals(int.Parse(filteredText))
                || e.StartingPrice.Equals(int.Parse(filteredText)));
            }
            return result;
        }
    }
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    // List<RealtorFirm> realtoFirms = new List<RealtorFirm>();
    // List<Realtor> realtors = new List<Realtor>();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);

        var result = await http.GetFromJsonAsync<List<Estate>>("https://localhost:7190/api/Estate");
        var category = await http.GetFromJsonAsync<List<Category>>("https://localhost:7190/api/Category");
        var county = await http.GetFromJsonAsync<List<County>>("https://localhost:7190/api/County");

        if (result is not null) estates = result;
        if (category is not null) categories = category;
        if (county is not null) counties = county;
    }

    void EstateAdd()
    {
        NavigationManager.NavigateTo("EstateAdd");
    }
    void EstateEdit(int id)
    {
        NavigationManager.NavigateTo($"EstateEdit/{id}");
    }
    void EstateDetails(int id)
    {
        NavigationManager.NavigateTo($"EstateDetails/{id}");
    }
}

    @*Need to add null check and fix for when calling objects so that the site will load even if and object is broken. Currently when calling on
        houses without mäklare or counties or category the site breaks down.
    *@