@page "/EstateEditTest"
@page "/EstateEditTest/{id:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using DTOs

<h3>EstateEditTest</h3>

@if (Id == null)
{
    <h3>Add Estate</h3>
}
else
{
    <h3>Edit @_Estate.Address</h3>
}

<EditForm Model="_Estate" OnSubmit="HandleSubmit">
    <div>
        <lable onformchange="address"> Adress </lable>
        <InputText id="Address" @bind-Value="_Estate.Address" class="form-control" />
    </div>
    <div>
        <lable onformchange="StartingPrice"> StartingPrice </lable>
        <InputNumber id="StartingPrice" @bind-Value="_Estate.StartingPrice" class="form-control" />
    </div>
    <div>
        <lable onformchange="LivingAreaKvm"> LivingAreaKvm </lable>
        <InputText id="LivingAreaKvm" @bind-Value="_Estate.LivingAreaKvm" class="form-control" />
    </div>
    <div>
        <lable onformchange="NumberOfRooms"> NumberOfRooms </lable>
        <InputText id="NumberOfRooms" @bind-Value="_Estate.NumberOfRooms" class="form-control" />
    </div>
    <div>
        <lable onformchange="BiAreaKvm"> BiAreaKvm </lable>
        <InputText id="BiAreaKvm" @bind-Value="_Estate.BiAreaKvm" class="form-control" />
    </div>
    <div>
        <lable onformchange="EstateAreaKvm"> EstateAreaKvm </lable>
        <InputText id="EstateAreaKvm" @bind-Value="_Estate.EstateAreaKvm" class="form-control" />
    </div>
    <div>
        <lable onformchange="MonthlyFee"> MonthlyFee </lable>
        <InputText id="MonthlyFee" @bind-Value="_Estate.MonthlyFee" class="form-control" />
    </div>
    <div>
        <lable onformchange="RunningCosts"> RunningCosts </lable>
        <InputText id="RunningCosts" @bind-Value="_Estate.RunningCosts" class="form-control" />
    </div>
    <div>
        <lable onformchange="ConstructionDate"> ConstructionDate </lable>
        <InputText id="ConstructionDate" @bind-Value="_Estate.ConstructionDate" class="form-control" />
    </div>
    <div>
        <lable onformchange="EstateDescription"> EstateDescription </lable>
        <InputText id="EstateDescription" @bind-Value="_Estate.EstateDescription" class="form-control" />
    </div>
    <div>
        <lable onformchange="PublishDate"> PublishDate </lable>
        <InputDate id="PublishDate" @bind-Value="_Estate.PublishDate" class="form-control" />
    </div>
    <div>
        <lable onformchange="County"> County </lable>
        <InputSelect id="County" @bind-Value="_Estate.CountyId" class="form-control" >
            
            @foreach (var county in counties)
            {

                <option label="@county.CountyName ">
                    @county.Id
                </option>
            }
            </InputSelect>
    </div>
    <div>
        <lable onformchange="Category"> Category </lable>

        <InputSelect id="Category" @bind-Value="_Estate.CategoryId" class="form-control" >
            @foreach (var category in categories)
            {

                <option label="@category.EstateCategory">
                    @category.Id
                </option>
            }
            </InputSelect>

    </div>
    <div>
        <lable onformchange="Realtor"> Realtor </lable>
        <InputSelect id="RealtorId" @bind-Value="_Estate.RealtorId" class="form-control">
            @foreach (var realtors in realtors)
            {
                <option label="@realtors.FirstName @realtors.LastName">
                    @realtors.Id
                </option>
            }
        </InputSelect>

    </div>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>
@code {
    [Parameter]
    public int? Id { get; set; }
    [SupplyParameterFromForm]
    public UpdateEstateDto _Estate { get; set; } = new UpdateEstateDto();
    List<Category> categories = new List<Category>();
    List<County> counties = new List<County>();
    List<Realtor> realtors = new List<Realtor>();
    protected override async Task OnParametersSetAsync()
    {
        var result = await Http.GetFromJsonAsync<UpdateEstateDto>($"https://localhost:7190/api/Estate/{Id}");
        if (result is not null) { _Estate = result; }

        var category = await Http.GetFromJsonAsync<List<Category>>("https://localhost:7190/api/Category");
        var county = await Http.GetFromJsonAsync<List<County>>("https://localhost:7190/api/County");
        var realtor = await Http.GetFromJsonAsync<List<Realtor>>("https://localhost:7190/api/Realtor");
        if (category is not null) categories = category;
        if (county is not null) counties = county;
        if (realtor is not null) realtors = realtor;
    }

    async Task HandleSubmit()
    {

        if (Id is not null)
        {
            var result = await Http.PutAsJsonAsync($"https://localhost:7190/api/Estate/{Id}", _Estate);
             // _Estate = await result.Content.ReadFromJsonAsync<UpdateEstateDto>();
        }
        // else
        // {
        //     var result = await Http.PostAsJsonAsync($"https://localhost:7190/api/Estate/", _Estate);
        //     _Estate = await result.Content.ReadFromJsonAsync<UpdateEstateDto>();
        // }
        NavigationManager.NavigateTo("Estates");
    }
}
